//Sử dụng tìm kiếm nhị phân
#include <bits/stdc++.h>

using namespace std;

int MOD = 1e9 + 7;

int min_sum_diff (vector<int>& v1, vector<int>& v2) {
	long long sum = 0;
	vector<int> v = v1;
//Calculate the current sum of differences.
	for (int i = 0; i < v.size(); i++) {
		sum += abs(v1[i] - v2[i]);
	}
	sort(v.begin(), v.end());
	long long minsum = sum;
	for (int i = 0; i < v.size(); i++) {
		int dist = abs(v1[i] - v2[i]);
		int l = 0, h = v.size() - 1;
//Find the number closest to nums2[i]. 
//The closer the element, the smaller the difference.
		while (l < h) {
			int m = l + (h - l) / 2;
			if (v[m] > v2[i]) {
				h = m;
			} else {
				l = m + 1;
			}
			dist = min(dist, abs(v2[i] - v[m]));
		}
		dist = min(dist, abs(v2[i] - v[l]));
		minsum = min(minsum, sum - abs(v1[i] - v2[i]) + dist);
	}
	return minsum % MOD;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t;
	cin >> t;
	while (t--) {
		int n;
		cin >> n;
		vector<int> v1(n), v2(n);
		for (int i = 0; i < n; i++) {
			cin >> v1[i];
		}
		for (int i = 0; i < n; i++) {
			cin >> v2[i];
		}
		cout << min_sum_diff(v1, v2) << endl;
	}
	return 0;
}
